package buffer

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"sync/atomic"
	"time"
)

type Buffer struct {
	data          []byte
	startPosition atomic.Uint64 // The logical start position of the buffer

	readPosition  atomic.Uint64 // The position where the next read will happen
	writePosition atomic.Uint64 // The position where the next write will happen
	full          bool

	mu sync.RWMutex

	closed bool
}

func NewBuffer(size uint64, startPosition uint64) *Buffer {
	buffer := &Buffer{
		data: make([]byte, size),
	}

	buffer.SetStartPosition(startPosition)

	return buffer
}

func (buffer *Buffer) Cap() uint64 {
	return uint64(cap(buffer.data))
}

func (buffer *Buffer) ReadAt(p []byte, position uint64) (int, error) {
	if buffer.closed {
		return 0, errors.New("buffer is closed")
	}

	buffer.mu.RLock()
	defer buffer.mu.RUnlock()

	availableSpace := buffer.GetBytesToOverwrite()
	if availableSpace == 0 {
		return 0, fmt.Errorf("not enough space in buffer: %d", availableSpace)
	}

	requestedSize := uint64(len(p))
	if requestedSize > availableSpace {
		p = p[:availableSpace]
	}

	bufferCap := buffer.Cap()
	relativePos := buffer.GetRelativePosition(position)
	bufferPosition := relativePos % bufferCap

	// fmt.Println("ReadAt: bufferPos", bufferPos, "readPosition", readPosition, "writePosition", writePosition, "bufferCount", bufferCount, "requestedSize", requestedSize, "relativePos", relativePos)

	endSpace := bufferCap - bufferPosition

	var readSize int
	if requestedSize <= endSpace {
		copy(p, buffer.data[bufferPosition:bufferPosition+requestedSize])
	} else {
		firstPart := bufferCap - bufferPosition
		secondPart := requestedSize - firstPart

		copy(p, buffer.data[bufferPosition:])
		copy(p[firstPart:], buffer.data[:secondPart])
	}

	newReadPosition := (bufferPosition + uint64(readSize)) % bufferCap
	buffer.readPosition.Store(newReadPosition)

	buffer.full = false

	// fmt.Printf("Read position %d, Read page %d, n %d\n", newReadPosition, readPage, n)

	return int(readSize), nil
}

// Write writes data to the ring buffer from p.
func (buffer *Buffer) Write(p []byte) (int, error) {
	if buffer.closed {
		return 0, errors.New("buffer is closed")
	}

	buffer.mu.Lock()
	defer buffer.mu.Unlock()

	bufferCap := buffer.Cap()

	availableSpace := bufferCap - buffer.GetBytesToOverwrite() - 1

	requestedSize := uint64(len(p))
	if requestedSize > availableSpace {
		return 0, fmt.Errorf("not enough space in buffer: %d/%d", requestedSize, availableSpace)
	}

	writePosition := buffer.writePosition.Load()
	endSpace := bufferCap - writePosition

	// if buffer is not full yet we need to append rather than copy
	if requestedSize <= endSpace {
		// No wraparound needed.
		copy(buffer.data[writePosition:], p)
	} else {
		copy(buffer.data[writePosition:], p[:endSpace])
		copy(buffer.data[:], p[endSpace:])
	}

	newWritePosition := (writePosition + requestedSize) % bufferCap
	buffer.writePosition.Store(newWritePosition)

	readPosition := buffer.readPosition.Load()

	buffer.full = newWritePosition == readPosition

	// fmt.Printf("Write position %d, Write page %d\n", newWritePosition, writePage)

	return int(requestedSize), nil
}

func (buffer *Buffer) SetStartPosition(position uint64) {
	buffer.startPosition.Store(position)
}

func (buffer *Buffer) GetStartPosition() uint64 {
	return buffer.startPosition.Load()
}

func (buffer *Buffer) GetRelativePosition(position uint64) uint64 {
	return position - buffer.startPosition.Load()
}

// Checks if the given logical position is within the readPos and writePos.
func (buffer *Buffer) IsPositionInBufferSync(position uint64) bool {
	buffer.mu.RLock()
	defer buffer.mu.RUnlock()

	return buffer.IsPositionInBuffer(position)
}

func (buffer *Buffer) IsPositionInBuffer(position uint64) bool {
	relativePosition := buffer.GetRelativePosition(position)
	if relativePosition < 0 {
		return false
	}

	bufferCap := buffer.Cap()
	bufferPosition := relativePosition % bufferCap

	readPosition := buffer.readPosition.Load()
	writePosition := buffer.writePosition.Load()

	if buffer.full {
		return bufferPosition >= 0 && bufferPosition < bufferCap
	}

	if readPosition <= writePosition {
		return bufferPosition >= readPosition && bufferPosition < writePosition
	}

	return bufferPosition >= readPosition || bufferPosition < writePosition
}

func (buffer *Buffer) WaitForPositionInBuffer(position uint64, context context.Context) {
	for {
		if buffer.closed {
			return
		}

		if buffer.IsPositionInBufferSync(position) {
			return
		}

		select {
		case <-context.Done():
			return
		case <-time.After(100 * time.Microsecond):
		}

	}
}

func (buffer *Buffer) GetBytesToOverwriteSync() uint64 {
	buffer.mu.RLock()
	defer buffer.mu.RUnlock()

	return buffer.GetBytesToOverwrite()
}

func (buffer *Buffer) GetBytesToOverwrite() uint64 {
	if buffer.closed {
		return 0
	}

	bufferCap := buffer.Cap()

    writePosition := buffer.writePosition.Load()
    readPosition := buffer.readPosition.Load()

	if buffer.full {
		return bufferCap
	}
	if writePosition >= readPosition {
		return writePosition - readPosition
	}
	return bufferCap - (readPosition - writePosition)
}

func (buffer *Buffer) Reset(position uint64) {
	buffer.mu.Lock()
	defer buffer.mu.Unlock()

	buffer.SetStartPosition(position)
	buffer.writePosition.Store(0)
	buffer.readPosition.Store(0)
	buffer.data = make([]byte, buffer.Cap())
	buffer.full = false
}

func (buffer *Buffer) Close() {
	buffer.mu.Lock()
	defer buffer.mu.Unlock()

	buffer.data = nil

	buffer.closed = true
}

